// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$bg-upload-big-name: 'bg-upload-big';
$bg-upload-big-x: 271px;
$bg-upload-big-y: 270px;
$bg-upload-big-offset-x: -271px;
$bg-upload-big-offset-y: -270px;
$bg-upload-big-width: 882px;
$bg-upload-big-height: 786px;
$bg-upload-big-total-width: 2929px;
$bg-upload-big-total-height: 1792px;
$bg-upload-big-image: '../img/sprite.png';
$bg-upload-big: (271px, 270px, -271px, -270px, 882px, 786px, 2929px, 1792px, '../img/sprite.png', 'bg-upload-big', );
$bg-upload-micro-name: 'bg-upload-micro';
$bg-upload-micro-x: 112px;
$bg-upload-micro-y: 112px;
$bg-upload-micro-offset-x: -112px;
$bg-upload-micro-offset-y: -112px;
$bg-upload-micro-width: 159px;
$bg-upload-micro-height: 158px;
$bg-upload-micro-total-width: 2929px;
$bg-upload-micro-total-height: 1792px;
$bg-upload-micro-image: '../img/sprite.png';
$bg-upload-micro: (112px, 112px, -112px, -112px, 159px, 158px, 2929px, 1792px, '../img/sprite.png', 'bg-upload-micro', );
$bg-upload-mini-name: 'bg-upload-mini';
$bg-upload-mini-x: 1153px;
$bg-upload-mini-y: 1056px;
$bg-upload-mini-offset-x: -1153px;
$bg-upload-mini-offset-y: -1056px;
$bg-upload-mini-width: 1776px;
$bg-upload-mini-height: 736px;
$bg-upload-mini-total-width: 2929px;
$bg-upload-mini-total-height: 1792px;
$bg-upload-mini-image: '../img/sprite.png';
$bg-upload-mini: (1153px, 1056px, -1153px, -1056px, 1776px, 736px, 2929px, 1792px, '../img/sprite.png', 'bg-upload-mini', );
$socials-name: 'socials';
$socials-x: 0px;
$socials-y: 0px;
$socials-offset-x: 0px;
$socials-offset-y: 0px;
$socials-width: 112px;
$socials-height: 112px;
$socials-total-width: 2929px;
$socials-total-height: 1792px;
$socials-image: '../img/sprite.png';
$socials: (0px, 0px, 0px, 0px, 112px, 112px, 2929px, 1792px, '../img/sprite.png', 'socials', );
$spritesheet-width: 2929px;
$spritesheet-height: 1792px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($bg-upload-big, $bg-upload-micro, $bg-upload-mini, $socials, );
$spritesheet: (2929px, 1792px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
